###Funktionierendes erstellen von Eventservices
POST http://localhost:3000/eventservice/add
Content-Type: application/json

{
  "providerId": 112,
  "category": "Location",
  "title": "Barn",
  "description": "Beautiful barn to rent for all kind of events",
  "availability": "Thursday, Friday",
  "capacity": 200,
  "price": 1200,
  "street": "farmersroad",
  "housenumber": 0,
  "zip": 1010,
  "city": "FarFarAway",
  "perimeter": "20"
}
> {%
client.test("Adding eventServices without subtype and requirements", function() {
  client.assert(response.status === 201, "Response status is 201");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
POST http://localhost:3000/eventservice/add
Content-Type: application/json

{
  "providerId": 93,
  "category": "Food",
  "title": "Colourful Cupcakes",
  "description": "Looking for colourful cupcakes, I can make them all in all the colours you want.",
  "availability": "Friday, Saturday",
  "capacity": 20,
  "price": 100,
  "street": "HomeOfCupcakes",
  "housenumber": 12343,
  "zip": 49494,
  "city": "New York",
  "perimeter": "100",
  "subtype": "Sweets & Desserts"
}
> {%
client.test("Adding eventServices with subtype without requirments", function() {
  client.assert(response.status === 201, "Response status is 201");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###

POST http://localhost:3000/eventservice/add
Content-Type: application/json

{
  "providerId": 94,
  "category": "Food",
  "title": "Black Cupcakes",
  "description": "Looking for black cupcakes? I will bake them.",
  "availability": "Monday, Saturday",
  "capacity": 100,
  "price": 1500,
  "street": "Black Cupcakes",
  "housenumber": 12,
  "zip": 6000,
  "city": "Luzern",
  "perimeter": "5",
  "subtype": "Sweets & Desserts",
  "requirements": "glutenfree is not possible yet"
}
> {%
client.test("Adding eventServices with subtype, requirments", function() {
  client.assert(response.status === 201, "Response status is 201");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
POST http://localhost:3000/eventservice/add
Content-Type: application/json

{
  "providerId": 95,
  "category": "Music",
  "title": "The perfect piano musician",
  "description": "I will give your event the perfect atmosphere",
  "availability": "Saturday,Sunday",
  "capacity": 100,
  "price": 1500,
  "street": "Does Not Matter",
  "housenumber": 0,
  "zip": 3000,
  "city": "Bern",
  "perimeter": "50",
  "requirements": "places that are too humid are not possible"
}
> {%
client.test("Adding eventServices with requirments", function() {
  client.assert(response.status === 201, "Response status is 201");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
DELETE http://localhost:3000/eventservice/44
Content-Type: application/json

> {%
client.test("deleting one service, normal", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###

DELETE http://localhost:3000/eventservice/12
Content-Type: application/json

> {%
client.test("deleting one service, user does not exist", function() {
  client.assert(response.status === 406, "Response status is 406");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
DELETE http://localhost:3000/eventservice/26
Content-Type: application/json

> {%
client.test("deleting one service, service does not exist", function() {
  client.assert(response.status === 406, "Response status is 406");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
DELETE http://localhost:3000/eventservice/333
Content-Type: application/json

> {%
client.test("deleting one service, service could not be deleted", function() {
  client.assert(response.status === 406, "Response status is 406");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###

POST http://localhost:3000/eventservice/order
Content-Type: application/json

{
  "serviceId": 4,
  "customerId": 5,
  "message": "dsadf",
  "date": "someDate",
  "time": " dadsdfasdfdsaf"
}
> {%
client.test("sending email", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
GET http://localhost:3000/eventservice/46
Content-Type: application/json

> {%
client.test("getting one EventService", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
POST  http://localhost:3000/eventservice/report
Content-Type: application/json

{
  "serviceId": 44,
  "userId": 104
}

> {%
client.test("report one eventservice" , function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
POST  http://localhost:3000/eventservice/report
Content-Type: application/json

{
  "serviceId": 99,
  "userId": 112
}

> {%
client.test("report one eventservice" , function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
PUT http://localhost:3000/eventservice/update
Content-Type: application/json

{
  "title":"Somenew title'",
  "description":"nope",
  "availability": "Saturday, Sunday",
  "requirements": "maybe don't know yet",
  "capacity": 100,
  "price": 100,
  "serviceId": 54
  }

> {%
client.test("update an event service no problem" , function() {
  client.assert(response.status === 202, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}
###
PUT http://localhost:3000/eventservice/update
Content-Type: application/json

{
  "title":"Somenew title'",
  "description":"nope",
  "availability": "Saturday, Sunday",
  "requirements": "maybe don't know yet",
  "capacity": 100,
  "price": 100

}

> {%
client.test("update an event service" , function() {
  client.assert(response.status === 404, "Response status is 404");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}
###
