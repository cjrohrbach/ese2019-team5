//This class tests the HTTP Client and therefore the method in the login controller
//Please be aware since the DB is constantly changing the service and provider Id  might not work and
// therefore cause failing tests
POST http://localhost:3000/profile/update
Content-Type: application/json

{
  "id":7,
  "firstname": "My new firstname",
  "lastname": "Meier",
  "email": "benton.tavon@iiron.us",
  "pwhash": -1425372064,
  "street": "Station",
  "housenumber": 22,
  "zip": 1245,
  "city": "San Francisco",
  "isFrim": false
}
> {%
client.test("updating profile no phone no firm", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
GET http://localhost:3000/profile/7
Content-Type: application/json


> {%
client.test("getting user information for profile", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
GET http://localhost:3000/profile/4
Content-Type: application/json

> {%
client.test("getting user information for profile, user does not exist", function() {
  client.assert(response.status === 404, "Response status is 404");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
DELETE http://localhost:3000/profile/17
Content-Type: application/json

> {%
client.test("user was deleted no exception", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
DELETE http://localhost:3000/profile/95
Content-Type: application/json

> {%
client.test("user was deleted user exception", function() {
  client.assert(response.status === 400, "Response status is 400");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
DELETE http://localhost:3000/profile/117
Content-Type: application/json

> {%
client.test("user was deleted no exception", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
PUT http://localhost:3000/profile/addFavourite
Content-Type: application/json

{   "userId":33,
  "serviceId":8}


> {%
client.test("added favorite event service", function() {
  client.assert(response.status === 201, "Response status is 201");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
PUT http://localhost:3000/profile/addFavourite
Content-Type: application/json

{   "userId":33,
  "serviceId":7}

> {%
client.test("added favorite event service", function() {
  client.assert(response.status === 201, "Response status is 201");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}
###
GET http://localhost:3000/profile/favourite/5
Content-Type: application/json

> {%
client.test("get favourite of user 5", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}
###

GET http://localhost:3000/profile/favourite/1
Content-Type: application/json

> {%
client.test("get favourite of user 1 ", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}
###
DELETE http://localhost:3000/profile/favourite/7/33
Content-Type: application/json

> {%
client.test("delete favourite 7 from user 33 ", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}
###
DELETE http://localhost:3000/profile/favourite/8/33
Content-Type: application/json

> {%
client.test("delete favourite 8 from user 33 ", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}
###
GET http://localhost:3000/profile/requestedServices/5
Content-Type: application/json

> {%
client.test("get requested Services", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
GET http://localhost:3000/profile/favourite/35/15
Content-Type: application/json

> {%
client.test("is favourite, true", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
GET http://localhost:3000/profile/favourite/35/13
Content-Type: application/json

> {%
client.test("is favourite, false", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
GET http://localhost:3000/profile/favourite/36/23
Content-Type: application/json

> {%
client.test("is favourite, true", function() {
  client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.isEmpty !== -1, "Response is not empty")
});
%}

###
